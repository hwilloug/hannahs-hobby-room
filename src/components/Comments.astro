---
import { type Comment } from '../lib/api';
import { getArticle } from '../lib/api';

interface Props {
  postSlug: string;
}

const { postSlug } = Astro.props;

function formatDate(dateString: string): string {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
  });
}

function buildCommentTree(comments: Comment[]): Comment[] {
  const commentMap = new Map<string, Comment>();
  const roots: Comment[] = [];

  // First pass: Create a map of all comments
  comments.forEach(comment => {
    commentMap.set(comment.id, { ...comment, children: [] });
  });

  // Second pass: Build the tree structure
  comments.forEach(comment => {
    const node = commentMap.get(comment.id)!;
    if (comment.parent_id) {
      const parent = commentMap.get(comment.parent_id);
      if (parent) {
        parent.children = parent.children || [];
        parent.children.push(node);
      }
    } else {
      roots.push(node);
    }
  });

  return roots;
}

const article = await getArticle(postSlug);
const commentTree = buildCommentTree(article?.comments || []);

---

<section class="comments-section">
  <h2>Comments</h2>

  <div class="comments-list" id="comments-list">
    {commentTree.length > 0 ? (
      commentTree.map(comment => (
        <div class="comment-thread">
        <div class="comment">
          <div class="comment-header">
            <div>
              <span class="comment-author">{comment.username}</span>
              {comment.username === "hannahwilloughby" && <span class="comment-author-author">Author</span>}
            </div>
            <span class="comment-date">{formatDate(comment.timestamp)}</span>
          </div>
          <div class="comment-content">{comment.body}</div>
          <button class="reply-button" data-comment-id={comment.id}>Reply</button>
          {comment.children && comment.children.length > 0 && (
            <div class="nested-comments">
              {comment.children.map(reply => (
                <div class="comment">
                  <div class="comment-header">
                    <div>
                      <span class="comment-author">{reply.username}</span>
                      {reply.username === "hannahwilloughby" && <span class="comment-author-author">Author</span>}
                    </div>
                    <span class="comment-date">{formatDate(reply.timestamp)}</span>
                  </div>
                  <div class="comment-content">{reply.body}</div>
                </div>
              ))}
            </div>
          )}
        </div>
        </div>
      ))
    ) : (
      <p>No comments yet.</p>
    )}
  </div>
  
  <form class="comment-form" id="comment-form">
    <div class="form-group">
      <label for="username">Name</label>
      <input 
        type="text" 
        id="username" 
        name="username" 
        required 
        placeholder="Your name"
      />
    </div>
    <div class="form-group">
      <label for="comment">Comment</label>
      <textarea 
        id="comment" 
        name="comment" 
        required 
        rows="4" 
        placeholder="Share your thoughts..."
      ></textarea>
    </div>
    
    <!-- Honeypot field to catch bots -->
    <div class="honeypot-field">
      <label for="website">Website</label>
      <input type="text" id="website" name="website" tabindex="-1" autocomplete="off" />
    </div>
    
    <button type="submit">Post Comment</button>
  </form>
</section>

<script define:vars={{ postSlug }}>
async function handleSubmit(e, parentId = null) {
  e.preventDefault();
  
  const form = e.target;
  const username = form.username.value;
  const body = form.comment.value;
  const honeypot = form.website?.value;
  
  // Check if honeypot field is filled (bot detection)
  if (honeypot) {
    console.log('Bot detected');
    return;
  }
  
  try {
    const response = await fetch(`https://blog-api.poppyland.dev/comments`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        article_slug: postSlug,
        comment_body: body,
        parent_comment_id: parentId,
        username
      })
    });

    if (!response.ok) {
      throw new Error('Failed to post comment');
    }

    window.location.reload();
  } catch (error) {
    console.error('Error posting comment:', error);
    alert('Failed to post comment. Please try again.');
  }
}

function createReplyForm(commentId) {
  const form = document.createElement('form');
  form.className = 'reply-form';
  form.innerHTML = `
    <div class="form-group">
      <label for="username-${commentId}">Name</label>
      <input 
        type="text" 
        id="username-${commentId}" 
        name="username" 
        required 
        placeholder="Your name"
      />
    </div>
    <div class="form-group">
      <label for="comment-${commentId}">Reply</label>
      <textarea 
        id="comment-${commentId}" 
        name="comment" 
        required 
        rows="3" 
        placeholder="Write your reply..."
      ></textarea>
    </div>
    
    <!-- Honeypot field for reply form -->
    <div class="honeypot-field" style="display: none;">
      <label for="website-${commentId}">Website</label>
      <input type="text" id="website-${commentId}" name="website" tabindex="-1" autocomplete="off" />
    </div>
    
    <div class="form-actions">
      <button type="submit">Post Reply</button>
      <button type="button" class="cancel-reply">Cancel</button>
    </div>
  `;
  
  form.addEventListener('submit', (e) => handleSubmit(e, commentId));
  return form;
}

function initializeEventListeners() {
  // Main comment form
  document.getElementById('comment-form')?.addEventListener('submit', handleSubmit);
  
  // Reply buttons
  document.querySelectorAll('.reply-button').forEach(button => {
    button.addEventListener('click', () => {
      const commentId = button.dataset.commentId;
      const comment = button.closest('.comment');
      
      // Remove any existing reply forms
      document.querySelectorAll('.reply-form').forEach(form => form.remove());
      
      // Add new reply form
      const replyForm = createReplyForm(commentId);
      comment.appendChild(replyForm);
      
      // Handle cancel button
      replyForm.querySelector('.cancel-reply')?.addEventListener('click', () => {
        replyForm.remove();
      });
    });
  });
}

document.addEventListener('DOMContentLoaded', initializeEventListeners);
initializeEventListeners();

</script>

<style>
.comments-section {
  margin-top: 4em;
  padding-top: 2em;
  border-top: 1px solid var(--primary-dark);
  max-width: 800px;
  margin: 0 auto;
}

.comments-section h2 {
  color: var(--primary-dark);
  text-shadow: none;
}

.comment-form,
.reply-form {
  background: rgba(var(--primary-main-rgb), 0.4);
  padding: 2em;
  border-radius: 12px;
  margin: 2em 0;
}

.reply-form {
  margin-top: 1em;
  padding: 1.5em;
}

.form-group {
  margin-bottom: 1em;
}

.form-group label {
  display: block;
  margin-bottom: 0.5em;
  color: var(--primary-dark);
  font-weight: 500;
}

.form-group input[type="text"],
.form-group textarea {
  width: 100%;
  padding: 0.8em;
  border: 2px solid rgba(var(--primary-main-rgb), 0.2);
  border-radius: 8px;
  background: white;
  font-size: 1em;
  transition: border-color 0.3s;
}

.form-group input[type="text"]:focus,
.form-group textarea:focus {
  outline: none;
  border-color: var(--primary-main);
}

/* Hide honeypot field */
.honeypot-field {
  display: none;
  position: absolute;
  left: -9999px;
}

.form-actions {
  display: flex;
  gap: 1em;
}

button[type="submit"],
.reply-button {
  background: var(--primary-main);
  color: white;
  border: none;
  padding: 0.8em 1.5em;
  border-radius: 8px;
  font-size: 1em;
  cursor: pointer;
  transition: background-color 0.2s, transform 0.2s;
}

button[type="submit"]:hover,
.reply-button:hover {
  background: var(--primary-dark);
  transform: translateY(-2px);
}

.cancel-reply {
  background: transparent;
  border: 2px solid var(--primary-main);
  color: var(--primary-main);
  padding: 0.8em 1.5em;
  border-radius: 8px;
  font-size: 1em;
  cursor: pointer;
  transition: all 0.2s;
}

.cancel-reply:hover {
  background: var(--primary-main);
  color: white;
}

.comments-list {
  display: flex;
  flex-direction: column;
  gap: 2em;
}

.comment-thread {
  display: flex;
  flex-direction: column;
  gap: 1em;
}

.comment {
  background: rgba(var(--primary-main-rgb), 0.4);
  padding: 1.5em;
  border-radius: 12px;
  border: 1px solid rgba(var(--primary-main-rgb), 0.1);
}

.nested-comments {
  margin-top: 1em;
  margin-left: 2em;
  display: flex;
  flex-direction: column;
  gap: 1em;
}

.comment-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 0.5em;
}

.comment-author {
  font-weight: 600;
  color: var(--primary-dark);
}

.comment-author-author {
  color: var(--warning-main);
  border: 1px solid var(--warning-main);
  padding: 0.2em 0.5em;
  border-radius: 8px;
  margin: 0 0.5em;
}

.comment-date {
  color: rgb(var(--gray));
  font-size: 0.9em;
}

.comment-content {
  color: rgb(var(--gray-dark));
  line-height: 1.5;
  margin-bottom: 1em;
}

.reply-button {
  font-size: 0.9em;
  padding: 0.5em 1em;
}

/* Dark mode styles */
:global(.dark) .comments-section h2,
:global(.dark) .form-group label,
:global(.dark) .comment-author {
  color: white;
}

:global(.dark) .comment-content {
  color: rgba(255, 255, 255, 0.9);
}

:global(.dark) .comment,
:global(.dark) .comment-form,
:global(.dark) .reply-form {
  background: rgba(255, 255, 255, 0.1);
  border-color: rgba(255, 255, 255, 0.2);
}

:global(.dark) .form-group input[type="text"],
:global(.dark) .form-group textarea {
  background: rgba(255, 255, 255, 0.9);
  color: var(--primary-dark);
}

:global(.dark) .cancel-reply {
  border-color: var(--secondary-light);
  color: var(--secondary-light);
}

:global(.dark) .cancel-reply:hover {
  background: var(--secondary-light);
  color: var(--primary-dark);
}

@media (max-width: 640px) {
  .comment-form,
  .reply-form {
    padding: 1.5em;
  }

  .form-actions {
    flex-direction: column;
  }

  .form-actions button {
    width: 100%;
  }

  .nested-comments {
    margin-left: 1em;
  }
}
</style>