---
import { getArticle } from '../lib/api';
import { API_URL } from '../consts';

interface Props {
  postSlug: string;
}

const { postSlug } = Astro.props;
const article = await getArticle(postSlug);
let likes = article?.article.likes;
---

<div class="like-container">
  <button 
    id="like-button-{postSlug}" 
    class="like-button" 
    data-slug={postSlug} 
    aria-label="Like this article"
  >
    <div class="like-icon">
      <svg class="heart" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/>
      </svg>
    </div>
    <span class="like-count">{likes}</span>
  </button>
</div>

<script define:vars={{ postSlug, API_URL }}>
// Try multiple ways to find the button
const buttonById = document.getElementById(`like-button-${postSlug}`);
const buttonByClass = document.querySelector('.like-button');
const button = buttonById || buttonByClass;

// Check if article is already liked
function isArticleLiked(slug) {
  const likedArticles = document.cookie
    .split('; ')
    .find(row => row.startsWith('likedArticles='));
  if (!likedArticles) return false;
  
  const likedSlugs = likedArticles.split('=')[1].split(',');
  return likedSlugs.includes(slug);
}

// Add article to liked cookie
function addToLikedArticles(slug) {
  const likedArticles = document.cookie
    .split('; ')
    .find(row => row.startsWith('likedArticles='));
    
  let likedSlugs = likedArticles ? 
    likedArticles.split('=')[1].split(',') : 
    [];
    
  if (!likedSlugs.includes(slug)) {
    likedSlugs.push(slug);
    document.cookie = `likedArticles=${likedSlugs.join(',')}; path=/; max-age=31536000`; // 1 year
  }
}

async function likeArticle(slug) {
  if (isArticleLiked(slug)) {
    console.log('Article already liked');
    return;
  }

  const response = await fetch(`${API_URL}/articles/${slug}/like`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ decrease: false })
  });
  
  if (!response.ok) {
    throw new Error('Failed to like article');
  }
  
  const data = await response.json();
  // Update the like count in the UI
  const likeCount = button.querySelector('.like-count');
  if (likeCount) {
    likeCount.textContent = data.likes;
  }
  // Add liked class to button
  button.classList.add('liked');
  
  // Add to liked articles cookie
  addToLikedArticles(slug);
  
  return data.likes;
}

if (button) {
  // Check if already liked and update UI
  if (isArticleLiked(postSlug)) {
    button.classList.add('liked');
  }

  button.addEventListener('click', async () => {
    console.log('Button clicked');
    const slug = button.dataset.slug;
    try {
      likes = await likeArticle(slug);
    } catch (error) {
      console.error('Error:', error);
    }
  });
} else {
  console.error('Could not find like button');
}
</script>

<style>
.like-container {
  display: flex;
  justify-content: center;
  margin: 1em 0;
}

.like-button {
  display: flex;
  align-items: center;
  gap: 0.5em;
  padding: 0.6em 1.2em;
  border: 2px solid var(--primary-main);
  background: transparent;
  color: var(--primary-main);
  border-radius: 25px;
  cursor: pointer;
  transition: all 0.3s ease;
  font-size: 0.9em;
}

.like-button:hover {
  background: var(--primary-main);
  color: white;
  transform: translateY(-2px);
}

.like-button.liked {
  cursor: default;
}

.like-icon {
  display: flex;
  align-items: center;
  justify-content: center;
}

.heart {
  width: 20px;
  height: 20px;
  transition: all 0.3s ease;
}

.like-count {
  font-weight: 600;
  min-width: 1em;
  text-align: center;
}

/* Liked state */
.like-button.liked {
  background: var(--primary-main);
  color: white;
}

.like-button.liked .heart {
  fill: currentColor;
}

/* Animation */
@keyframes likeAnimation {
  0% { transform: scale(1); }
  25% { transform: scale(1.2); }
  50% { transform: scale(0.95); }
  100% { transform: scale(1); }
}

.like-button.animate .heart {
  animation: likeAnimation 0.7s ease;
}

/* Dark mode styles */
:global(.dark) .like-button {
  border-color: var(--secondary-light);
  color: var(--secondary-light);
}

:global(.dark) .like-button:hover,
:global(.dark) .like-button.liked {
  background: var(--secondary-light);
  color: var(--primary-dark);
}
</style>