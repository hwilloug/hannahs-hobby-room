---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import { format } from 'date-fns';

// Protected by middleware - only admins can access
const { userId, isAdmin } = Astro.locals;
if (!userId || !isAdmin) {
  return Astro.redirect('/');
}

const { slug } = Astro.params;
const isNew = slug === 'new';

let article = null;
if (!isNew) {
  const articles = await getCollection('blog');
  article = articles.find(a => a.slug === slug);
  if (!article) {
    return Astro.redirect('/manage-articles');
  }
}

const categories = ['Gardening', 'Crafts', 'Coding', 'Books', 'Antiquing'];
---

<Layout title={isNew ? 'New Article' : 'Edit Article'}>
  <div class="editor-page">
    <header>
      <div class="header-content">
        <h1>{isNew ? 'New Article' : 'Edit Article'}</h1>
        <div class="header-actions">
          <button class="preview-btn">Preview</button>
          <button class="save-btn" type="submit" form="article-form">Save</button>
        </div>
      </div>
    </header>

    <form id="article-form" class="editor-form">
      <div class="form-grid">
        <div class="form-group">
          <label for="title">Title</label>
          <input 
            type="text" 
            id="title" 
            name="title" 
            required
            value={article?.data.title || ''}
          />
        </div>

        <div class="form-group">
          <label for="description">Description</label>
          <input 
            type="text" 
            id="description" 
            name="description" 
            required
            value={article?.data.description || ''}
          />
        </div>

        <div class="form-group">
          <label for="category">Category</label>
          <select id="category" name="category" required>
            <option value="">Select a category</option>
            {categories.map(cat => (
              <option 
                value={cat}
                selected={cat === article?.data.category}
              >
                {cat}
              </option>
            ))}
          </select>
        </div>

        <div class="form-group">
          <label for="subcategories">Subcategories</label>
          <input 
            type="text" 
            id="subcategories" 
            name="subcategories" 
            placeholder="Comma-separated values"
            value={article?.data.subcategories?.join(', ') || ''}
          />
        </div>

        <div class="form-group">
          <label for="heroImage">Hero Image URL</label>
          <input 
            type="text" 
            id="heroImage" 
            name="heroImage" 
            required
            value={article?.data.heroImage || '/blog-placeholder-1.jpg'}
          />
        </div>

        <div class="form-group">
          <label for="pubDate">Publish Date</label>
          <input 
            type="date" 
            id="pubDate" 
            name="pubDate" 
            required
            value={article?.data.pubDate ? format(article.data.pubDate, 'yyyy-MM-dd') : format(new Date(), 'yyyy-MM-dd')}
          />
        </div>
      </div>

      <div class="editor-container">
        <div class="editor-wrapper">
          <label for="content">Content (Markdown)</label>
          <div class="editor-toolbar">
            <button type="button" data-action="bold" title="Bold">B</button>
            <button type="button" data-action="italic" title="Italic">I</button>
            <button type="button" data-action="link" title="Link">üîó</button>
            <button type="button" data-action="image" title="Image">üì∑</button>
            <button type="button" data-action="code" title="Code">{'<>'}</button>
            <button type="button" data-action="quote" title="Quote">‚ùù</button>
            <div class="separator"></div>
            <button type="button" data-action="h1" title="Heading 1">H1</button>
            <button type="button" data-action="h2" title="Heading 2">H2</button>
            <button type="button" data-action="h3" title="Heading 3">H3</button>
            <div class="separator"></div>
            <button type="button" data-action="ul" title="Bullet List">‚Ä¢</button>
            <button type="button" data-action="ol" title="Numbered List">1.</button>
            <button type="button" data-action="generate" title="Generate Content">‚ú®</button>
          </div>
          <textarea 
            id="content" 
            name="content" 
            required
            rows="20"
          >{article?.body || ''}</textarea>
        </div>
        <div class="preview-panel">
          <div class="preview-header">
            <h3>Preview</h3>
            <button type="button" class="close-preview">√ó</button>
          </div>
          <div class="preview-content"></div>
        </div>
      </div>
    </form>
  </div>
</Layout>

<style>
  .editor-page {
    max-width: 1400px;
    margin: 0 auto;
    padding: 2em;
  }

  header {
    margin-bottom: 2em;
  }

  .header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  h1 {
    margin: 0;
    color: var(--primary-dark);
    text-shadow: none;
  }

  .header-actions {
    display: flex;
    gap: 1em;
  }

  .preview-btn,
  .save-btn {
    padding: 0.8em 1.5em;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 1em;
    transition: all 0.2s;
  }

  .preview-btn {
    background: var(--secondary-light);
    color: var(--primary-dark);
  }

  .preview-btn:hover {
    background: var(--secondary-main);
    transform: translateY(-2px);
  }

  .save-btn {
    background: var(--primary-main);
    color: white;
  }

  .save-btn:hover {
    background: var(--primary-dark);
    transform: translateY(-2px);
  }

  .form-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5em;
    margin-bottom: 2em;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5em;
  }

  label {
    color: var(--primary-dark);
    font-weight: 500;
  }

  input,
  select,
  textarea {
    padding: 0.8em;
    border: 2px solid rgba(var(--primary-main-rgb), 0.2);
    border-radius: 8px;
    font-size: 1em;
    background: white;
    color: var(--primary-dark);
    transition: border-color 0.2s;
  }

  input:focus,
  select:focus,
  textarea:focus {
    outline: none;
    border-color: var(--primary-main);
  }

  .editor-container {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1.5em;
    position: relative;
  }

  .editor-wrapper {
    display: flex;
    flex-direction: column;
    gap: 0.5em;
  }

  .editor-toolbar {
    display: flex;
    gap: 0.5em;
    padding: 0.5em;
    background: rgba(var(--primary-main-rgb), 0.1);
    border-radius: 8px 8px 0 0;
    border: 2px solid rgba(var(--primary-main-rgb), 0.2);
    border-bottom: none;
    flex-wrap: wrap;
  }

  .editor-toolbar button {
    padding: 0.5em 1em;
    border: none;
    border-radius: 4px;
    background: white;
    color: var(--primary-dark);
    cursor: pointer;
    transition: all 0.2s;
  }

  .editor-toolbar button:hover {
    background: var(--primary-light);
    transform: translateY(-1px);
  }

  .separator {
    width: 1px;
    background: rgba(var(--primary-main-rgb), 0.2);
    margin: 0 0.5em;
  }

  textarea {
    resize: vertical;
    min-height: 400px;
    border-radius: 0 0 8px 8px;
    font-family: monospace;
    line-height: 1.6;
  }

  .preview-panel {
    display: none;
    position: fixed;
    top: 0;
    right: 0;
    width: 50%;
    height: 100%;
    background: white;
    border-left: 2px solid rgba(var(--primary-main-rgb), 0.2);
    padding: 2em;
    overflow-y: auto;
  }

  .preview-panel.active {
    display: block;
  }

  .preview-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1em;
    position: sticky;
    top: 0;
    background: white;
    padding: 1em;
    border-bottom: 1px solid rgba(var(--primary-main-rgb), 0.2);
  }

  .preview-header h3 {
    margin: 0;
    color: var(--primary-dark);
    text-shadow: none;
  }

  .close-preview {
    background: none;
    border: none;
    font-size: 1.5em;
    color: var(--primary-dark);
    cursor: pointer;
    padding: 0.5em;
    transition: transform 0.2s;
  }

  .close-preview:hover {
    transform: scale(1.1);
  }

  /* Dark mode styles */
  :global(.dark) .preview-panel {
    background: var(--primary-dark);
  }

  :global(.dark) .preview-header {
    background: var(--primary-dark);
  }

  :global(.dark) input,
  :global(.dark) select,
  :global(.dark) textarea {
    background: rgba(255, 255, 255, 0.1);
    color: white;
  }

  :global(.dark) .editor-toolbar button {
    background: rgba(255, 255, 255, 0.1);
    color: white;
  }

  :global(.dark) .editor-toolbar button:hover {
    background: rgba(255, 255, 255, 0.2);
  }

  @media (max-width: 768px) {
    .editor-page {
      padding: 1em;
    }

    .preview-panel {
      width: 100%;
    }

    .header-content {
      flex-direction: column;
      align-items: flex-start;
      gap: 1em;
    }

    .header-actions {
      width: 100%;
      justify-content: space-between;
    }

    .preview-btn,
    .save-btn {
      flex: 1;
      text-align: center;
    }
  }
</style>

<script>
  import { marked } from 'marked';

  class ArticleEditor {
    form: HTMLFormElement;
    previewBtn: HTMLButtonElement;
    previewPanel: HTMLElement;
    closePreviewBtn: HTMLButtonElement;
    content: HTMLTextAreaElement;
    previewContent: HTMLElement;
    toolbarButtons: NodeListOf<HTMLButtonElement>;

    constructor() {
      this.form = document.getElementById('article-form') as HTMLFormElement;
      this.previewBtn = document.querySelector('.preview-btn') as HTMLButtonElement;
      this.previewPanel = document.querySelector('.preview-panel') as HTMLElement;
      this.closePreviewBtn = document.querySelector('.close-preview') as HTMLButtonElement;
      this.content = document.getElementById('content') as HTMLTextAreaElement;
      this.previewContent = document.querySelector('.preview-content') as HTMLElement;
      this.toolbarButtons = document.querySelectorAll('.editor-toolbar button');

      this.setupEventListeners();
    }

    setupEventListeners() {
      // Preview toggle
      this.previewBtn.addEventListener('click', () => this.togglePreview());
      this.closePreviewBtn.addEventListener('click', () => this.togglePreview());

      // Live preview update
      this.content.addEventListener('input', () => this.updatePreview());

      // Toolbar actions
      this.toolbarButtons.forEach(button => {
        button.addEventListener('click', () => {
          const action = button.dataset.action;
          if (action) {
            if (action === 'generate') {
              this.generateContent();
            } else {
              this.executeAction(action);
            }
          }
        });
      });

      // Form submission
      this.form.addEventListener('submit', (e) => this.handleSubmit(e));
    }

    togglePreview() {
      this.previewPanel.classList.toggle('active');
      if (this.previewPanel.classList.contains('active')) {
        this.updatePreview();
      }
    }

    updatePreview() {
      const markdown = this.content.value;
      const html = marked(markdown);
      this.previewContent.innerHTML = html;
    }

    async generateContent() {
      const title = (document.getElementById('title') as HTMLInputElement).value;
      const description = (document.getElementById('description') as HTMLInputElement).value;
      const category = (document.getElementById('category') as HTMLSelectElement).value;

      if (!title || !description || !category) {
        alert('Please fill in the title, description, and category first.');
        return;
      }

      try {
        const response = await fetch('/api/generate-content', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ title, description, category }),
        });

        if (!response.ok) throw new Error('Failed to generate content');

        const { content } = await response.json();
        this.content.value = content;
        this.updatePreview();
      } catch (error) {
        console.error('Error generating content:', error);
        alert('Failed to generate content. Please try again.');
      }
    }

    executeAction(action: string) {
      const textarea = this.content;
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const selection = textarea.value.substring(start, end);

      let replacement = '';
      switch (action) {
        case 'bold':
          replacement = `**${selection || 'bold text'}**`;
          break;
        case 'italic':
          replacement = `*${selection || 'italic text'}*`;
          break;
        case 'link':
          replacement = `[${selection || 'link text'}](url)`;
          break;
        case 'image':
          replacement = `![${selection || 'alt text'}](image-url)`;
          break;
        case 'code':
          replacement = `\`${selection || 'code'}\``;
          break;
        case 'quote':
          replacement = `> ${selection || 'quote'}`;
          break;
        case 'h1':
          replacement = `# ${selection || 'Heading 1'}`;
          break;
        case 'h2':
          replacement = `## ${selection || 'Heading 2'}`;
          break;
        case 'h3':
          replacement = `### ${selection || 'Heading 3'}`;
          break;
        case 'ul':
          replacement = `- ${selection || 'List item'}`;
          break;
        case 'ol':
          replacement = `1. ${selection || 'List item'}`;
          break;
      }

      textarea.value = 
        textarea.value.substring(0, start) +
        replacement +
        textarea.value.substring(end);

      // Update preview if active
      if (this.previewPanel.classList.contains('active')) {
        this.updatePreview();
      }

      // Restore focus and selection
      textarea.focus();
      textarea.selectionStart = start;
      textarea.selectionEnd = start + replacement.length;
    }

    async handleSubmit(e: Event) {
      e.preventDefault();
      const formData = new FormData(this.form);
      
      try {
        const response = await fetch('/api/articles', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(Object.fromEntries(formData)),
        });

        if (!response.ok) {
          throw new Error('Failed to save article');
        }

        const data = await response.json();
        if (data.success) {
          window.location.href = '/manage-articles';
        } else {
          throw new Error(data.error || 'Failed to save article');
        }
      } catch (error) {
        console.error('Error saving article:', error);
        alert('Failed to save article. Please try again.');
      }
    }
  }

  // Initialize editor when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new ArticleEditor();
  });
</script>