---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

const articles = await getCollection('blog');
const sortedArticles = articles.sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);
---

<Layout title="Manage Articles">
  <div class="manage-articles">
    <header>
      <h1>Manage Articles</h1>
      <button class="new-article-btn">New Article</button>
    </header>

    <div class="articles-list">
      {sortedArticles.map((article) => (
        <div class="article-item">
          <div class="article-info">
            <h3>{article.data.title}</h3>
            <p class="meta">
              Published: {article.data.pubDate.toLocaleDateString()}
              {article.data.updatedDate && 
                ` • Updated: ${article.data.updatedDate.toLocaleDateString()}`
              }
            </p>
            <p class="category">
              Category: {article.data.category}
              {article.data.subcategories && 
                ` • ${article.data.subcategories.join(', ')}`
              }
            </p>
          </div>
          <div class="actions">
            <button class="edit-btn" data-slug={article.slug}>Edit</button>
            <button class="delete-btn" data-slug={article.slug}>Delete</button>
          </div>
        </div>
      ))}
    </div>
  </div>
</Layout>

<style>
  .manage-articles {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2em;
  }

  header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2em;
  }

  h1 {
    margin: 0;
    color: var(--primary-dark);
  }

  .new-article-btn {
    background: var(--primary-main);
    color: white;
    border: none;
    padding: 0.8em 1.5em;
    border-radius: 8px;
    cursor: pointer;
    font-size: 1em;
    transition: background-color 0.2s, transform 0.2s;
  }

  .new-article-btn:hover {
    background: var(--primary-dark);
    transform: translateY(-2px);
  }

  .articles-list {
    display: grid;
    gap: 1.5em;
  }

  .article-item {
    background: var(--primary-light);
    border: 1px solid var(--primary-dark);
    box-shadow: 2px 2px var(--primary-dark);
    padding: 1.5em;
    border-radius: 8px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1em;
  }

  .article-info {
    flex: 1;
  }

  .article-info h3 {
    margin: 0 0 0.5em 0;
    color: var(--primary-dark);
    font-size: 1.2em;
  }

  .meta, .category {
    margin: 0;
    font-size: 0.9em;
    color: rgb(var(--gray));
  }

  .actions {
    display: flex;
    gap: 0.5em;
  }

  .edit-btn, .delete-btn {
    padding: 0.5em 1em;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.9em;
    transition: all 0.2s;
  }

  .edit-btn {
    background: var(--primary-main);
    color: white;
  }

  .edit-btn:hover {
    background: var(--primary-dark);
    transform: translateY(-2px);
  }

  .delete-btn {
    background: #ff5757;
    color: white;
  }

  .delete-btn:hover {
    background: #ff3333;
    transform: translateY(-2px);
  }

  /* Dark mode styles */
  :global(.dark) .article-item {
    background: rgba(var(--primary-main-rgb), 0.2);
  }

  :global(.dark) .article-info h3 {
    color: white;
  }

  @media (max-width: 768px) {
    .manage-articles {
      padding: 1em;
    }

    .article-item {
      flex-direction: column;
      align-items: flex-start;
    }

    .actions {
      width: 100%;
      justify-content: flex-end;
    }
  }
</style>

<script>
  // Handle article management actions
  document.addEventListener('DOMContentLoaded', () => {
    const newArticleBtn = document.querySelector('.new-article-btn');
    const editBtns = document.querySelectorAll('.edit-btn');
    const deleteBtns = document.querySelectorAll('.delete-btn');

    newArticleBtn?.addEventListener('click', () => {
      window.location.href = '/manage-articles/new-article';
    });

    editBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const slug = btn.getAttribute('data-slug');
        if (slug) {
          window.location.href = `/manage-articles/${slug}`;
        }
      });
    });

    deleteBtns.forEach(btn => {
      btn.addEventListener('click', async () => {
        const slug = btn.getAttribute('data-slug');
        if (slug && confirm('Are you sure you want to delete this article?')) {
          try {
            const response = await fetch(`/api/articles/${slug}`, {
              method: 'DELETE',
            });
            
            if (response.ok) {
              // Remove the article from the DOM or refresh the page
              const articleItem = btn.closest('.article-item');
              articleItem?.remove();
            } else {
              alert('Failed to delete article');
            }
          } catch (error) {
            console.error('Error deleting article:', error);
            alert('Failed to delete article');
          }
        }
      });
    });
  });
</script>