---
import Layout from '../layouts/Layout.astro';
import { SITE_TITLE } from '../consts';
import { getCollection } from 'astro:content';
import { getArticles } from '../lib/api';

const allPosts = await getCollection('blog');
const articles = await getArticles();

console.log(articles)

const categories = ['gardening', 'crafts', 'coding', 'books', 'antiquing'];

const postsByCategory = categories.map(category => ({
  name: category,
  count: allPosts.filter(post => post.data.category?.toLowerCase() === category).length
}));

const postStats = articles.map(article => ({
  title: article.title,
  likes: article.likes,
  comments: article.comment_count
})).sort((a, b) => b.likes - a.likes);
---

<Layout title="Dashboard">
  <div class="dashboard">
    <h1 class="centered">{SITE_TITLE} Dashboard</h1>
    <div class="chart-container">
      <div class="chart">
        <canvas id="myPieChart"></canvas>
      </div>
      <div class="full-size-chart">
        <div class="sort-controls">
          <label>Sort by:</label>
          <select id="sortSelect">
            <option value="likes">Likes</option>
            <option value="comments">Comments</option>
          </select>
        </div>
        <canvas id="postStatsChart"></canvas>
      </div>
    </div>
  </div>
</Layout>

<style>
  .dashboard {
    margin: 0 auto;
    padding: 2em;
  }
  .chart-container {
    margin: 2em 0;
  }
  .chart {
    height: 500px;
    margin: 4em;
    padding: 2em;
    background-color: rgba(var(--primary-main-rgb), 0.6);
  }
  .full-size-chart {
    height: 2000px;
    margin: 4em;
    padding: 2em;
    background-color: rgba(var(--primary-main-rgb), 0.6);
  }
  .sort-controls {
    margin-bottom: 1em;
  }
  .sort-controls select {
    margin-left: 0.5em;
    padding: 0.25em;
    border-radius: 4px;
  }
</style>

<script define:vars={{ postsByCategory, postStats }}>
  // Move the Chart import and initialization to client-side
  document.addEventListener('DOMContentLoaded', async () => {
    const Chart = await import('/node_modules/chart.js/auto/auto.js');
    let barChart;
    
    // Pie Chart
    const pieCtx = document.getElementById('myPieChart');
    if (pieCtx) {
      new Chart.default(pieCtx, {
        type: 'pie',
        data: {
          labels: postsByCategory.map(c => c.name.charAt(0).toUpperCase() + c.name.slice(1)),
          datasets: [{
            data: postsByCategory.map(c => c.count),
            backgroundColor: [
              'rgb(255, 99, 132)',
              'rgb(54, 162, 235)', 
              'rgb(255, 205, 86)',
              'rgb(153, 102, 255)',
              'rgb(255, 159, 64)'
            ]
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            title: {
              display: true,
              text: 'Posts by Category'
            }
          }
        }
      });
    }

    function createBarChart(sortedData) {
      const barCtx = document.getElementById('postStatsChart');
      if (barCtx) {
        if (barChart) {
          barChart.destroy();
        }
        
        barChart = new Chart.default(barCtx, {
          type: 'bar',
          data: {
            labels: sortedData.map(post => post.title),
            datasets: [
              {
                label: 'Likes',
                data: sortedData.map(post => post.likes),
                backgroundColor: 'rgb(54, 162, 235)',
                borderColor: 'rgb(54, 162, 235)',
                borderWidth: 1,
                barThickness: 20
              },
              {
                label: 'Comments',
                data: sortedData.map(post => post.comments),
                backgroundColor: 'rgb(255, 99, 132)',
                borderColor: 'rgb(255, 99, 132)',
                borderWidth: 1,
                barThickness: 20
              }
            ]
          },
          options: {
            indexAxis: 'y',
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              title: {
                display: true,
                text: 'Post Engagement'
              }
            },
            scales: {
              x: {
                beginAtZero: true
              },
              y: {
                ticks: {
                  autoSkip: false,
                  display: true
                }
              }
            }
          }
        });
      }
    }

    // Initial bar chart creation
    createBarChart(postStats);

    // Handle sort changes
    document.getElementById('sortSelect').addEventListener('change', (e) => {
      const sortBy = e.target.value;
      const sortedData = [...postStats].sort((a, b) => 
        sortBy === 'likes' ? b.likes - a.likes : b.comments - a.comments
      );
      createBarChart(sortedData);
    });
  });
</script>